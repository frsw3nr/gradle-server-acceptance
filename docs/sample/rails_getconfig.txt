Rails Getconfig 管理コンソール作成
==================================

スケルトン作成
モデル作成
コントローラ作成
ビュー作成

Railsインストール
-----------------

rbenv、Rubyのインストール
rbenvとそのプラグインruby-buildをインストールする。

git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
mkdir -p ~/.rbenv/plugins
git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build

rbenv用の以下の設定を .bash_profile に設定する。

export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

書き換えた .bash_profile の設定を読み込む。

source ~/.bash_profile

sudo -E yum install -y openssl-devel readline-devel zlib-devel

インストール可能なRubyのバージョンを調べる。

rbenv install -l

rbenv install 2.3.3
rbenv rehash
rbenv global 2.3.3

gem install bundler
rbenv rehash

gem update --system
gem install --no-ri --no-rdoc rails
gem install bundler

スケルトン作成
--------------

cd /home/psadmin/work/gradle/gradle-server-acceptance/docs/sample
mkdir getconfig_rails
cd getconfig_rails

bundle init

vi Gemfile
gem 'rails' コメントを外す

bundle install --path vendor/bundle --jobs=4
bundle exec rails new -B -d mysql --skip-turbolinks .
bundle exec rails new -B --skip-turbolinks .

vi .gitignore
追加
/vendor/bundle

bundle 実行

bundle

https://github.com/voltrb/volt/issues/309

gem uninstall volt
gem install volt

Gemfile の以下コメントアウトを外して、 bundle update 実行

gem 'therubyracer', platforms: :ruby

bundle exec rails generate simple_form:install --bootstrap

DB 作成
-------

mysql -u root -p 
create database rails_getconfig_development3;
create database rails_getconfig_development;

DB名とパスワード変更

vi config/database.yml

モデル作成
----------

# 引数は model名, カラム情報

# マスター：アカウント,タグ,グループ
bundle exec rails g model account node:references user_name:string password:string remote_ip:string
bundle exec rails g model tag   tag_name:string
bundle exec rails g model group  group_name:string

# プラットフォーム,プラットフォーム構成詳細
bundle exec rails g model platform platform_name:string build:integer
bundle exec rails g model platform_config_detail platform:references item_name:string value:text

# ノード,タグノード,ノード構成,ノード構成詳細
bundle exec rails g model node group:references node_name:string ip:string specific_password:string alias_name:string
bundle exec rails g model tag_node  tag:references node:references
bundle exec rails g model node_config platform:references node:references node_config_name:string value:string account:references
bundle exec rails g model node_config_detail node_config:references item_name:string value:text

# メトリック,テスト結果,デバイス結果
bundle exec rails g model metric platform:references metric_name:string level:integer device_flag:boolean
bundle exec rails g model test_result node:references metric:references verify:boolean value:text
bundle exec rails g model device_result node:references metric:references seq:integer item_name:string value:text

# 検証,検証構成,検証履歴
bundle exec rails g model verify_test test_name:string
bundle exec rails g model verify_config  verify_test:references item_name:string value:text
bundle exec rails g model verify_history verify_test:references node:references metric:references verified:boolean

rails db:migrate RAILS_ENV=development

ユニークキー作成
----------------

bundle exec rails g migration AddIndexToAccount
bundle exec rails g migration AddIndexToTag
bundle exec rails g migration AddIndexToGroup

bundle exec rails g migration AddIndexToPlatform
bundle exec rails g migration AddIndexToPlatformConfigDetail

bundle exec rails g migration AddIndexToNode
bundle exec rails g migration AddIndexToTagNode

bundle exec rails g migration AddIndexToNodeConfig
bundle exec rails g migration AddIndexToNodeConfigDetail

bundle exec rails g migration AddIndexToMetric
bundle exec rails g migration AddIndexToTestResult
bundle exec rails g migration AddIndexToDeviceResult

bundle exec rails g migration AddIndexToVerifyTest
bundle exec rails g migration AddIndexToVerifyConfig
bundle exec rails g migration AddIndexToVerifyHistory


vi db/migrate/20171004114752_add_index_to_site.rb

    add_index :sites, [:site_name], :unique => true


bundle exec rails db:environment:set RAILS_ENV=development
bundle exec rails db:migrate:reset RAILS_ENV=development
bundle exec rails db:migrate RAILS_ENV=development

    add_index :site_nodes, [:site_id, :node_id], :unique => true

# rails g migration AddColumnToNode tenant:references

mysql -u root -p rails_getconfig_development2

grant all privileges on rails_getconfig_development2.* to redmine@"%" identified by 'getperf' with grant option;

insert into sites (id, site_name) select id, site_name from redmine.sites;
insert into tenants (id, tenant_name) select id, tenant_name from redmine.tenants;
insert into nodes (id, tenant_id, node_name) select id, tenant_id, node_name from redmine.nodes;
insert into platforms (id, platform_name) select id, domain_name from redmine.domains;

insert into metrics(id, platform_id, metric_name, device_flag) select id, domain_id, metric_name, device_flag from redmine.metrics;
insert into test_results(id, node_id, metric_id, verify, value) select id, node_id, metric_id, verify, value from redmine.test_results;
insert into device_results(id, node_id, metric_id, seq, item_name, value) select id, node_id, metric_id, seq, item_name, value from redmine.device_results;


./bin/rails console

site = Site.new(site_name: 'Test01')
site.persisted?  # => false 保存済みでない
site.save

@sites=Site.all
Site.where(site_name: 'GitDemoEnv')

Tenant.joins(:nodes)
@nodes=Node.all
Node.joins(:tenant).find_by(id: 1)
Node.includes(:tenant).find_by(id: 1)
@nodes=Node.eager_load(:tenant).select(:tenant.tenant_name, :node_name)

@nodes[0].tenant.tenant_name


多対多

@nodes=Node.eager_load(:sites).find_by(id: 1)
@nodes[0].sites[0].site_name

@nodes=Node.eager_load(:sites).find_by(node_name: 'testgit001')

検査結果

Domain.all
metric=Metric.eager_load(:platform).find_by(metric_name: 'cpu')
Metric.eager_load(:platform).find_by(id:30).platform
Metric.eager_load(:platform).find_by(metric_name: "mem_free").platform

TestResult.eager_load(:metric,:platform,:node)
TestResult.eager_load(:metric,:node)
TestResult.find_by(metric_id: 30)
TestResult.eager_load(:metric).find_by(metric_id: 30)

TestResult.find_by(metric_id: 30).node.tenant

デバイス付き検査結果

DeviceResult.all()
DeviceResult.find_by(metric_id: 90).metric

@devices=Node.find_by(node_name:'ostrich').device_results
@devices[0].metric.metric_name
@devices[0].metric.platform.platform_name

デバッグ設定
------------

# Gemfile

group :development, :test do
  gem 'pry-rails'  # rails console(もしくは、rails c)でirbの代わりにpryを使われる
  gem 'pry-doc'    # methodを表示
  gem 'pry-byebug' # デバッグを実施(Ruby 2.0以降で動作する)
  gem 'pry-stack_explorer' # スタックをたどれる
end
Bundlerでgemをインストールします。

bundle install
では、rails cでconsoleを開きましょう。
consoleにpry(main)と表示されれば、Pryが使われている証拠です。


コントローラ
------------

# Gemfile に kaminari ページネーション追加
gem "kaminari"


# controller
# 引数はplugin名, controller名, action名
bundle exec rails generate controller test_result index

inventory
device_inventory

http://ostrich:3000/inventory/index?page=3

デザイン
--------

https://qiita.com/kamizuno/items/5c3ecceea5aa78e25058

Gemfileに以下を追加する

# less(CSS)対応（後述LESSを使う場合）
gem 'less-rails'
# JavaScript のエンジンである v8 を Ruby から使えるようにする
gem 'therubyracer'
# JavaScriptコードを実行するためのエンジン
gem 'execjs'

# Twitter社が提供しているCSSとJavaScriptのフレームワーク
gem 'twitter-bootstrap-rails'

プロジェクトにbootstrap関連の必要なファイルをインストールする

bundle exec spring stop
bundle
bundle exec rails g bootstrap:install less

bundle exec rails g bootstrap:layout application fixed 

ノード
------

現在の _form.html.erb のソースは少し見通しが悪いので、シンプルに記述できるSimple Formを導入する。

# シンプルフォーム
gem 'simple_form'
bundlerでインストールする。

bundler install
simple_formに必要なファイルをプロジェクトにインストールする。

rails generate simple_form:install --bootstrap
   identical  config/initializers/simple_form.rb
   identical  config/initializers/simple_form_bootstrap.rb
       exist  config/locales
   identical  config/locales/simple_form.en.yml
   identical  lib/templates/erb/scaffold/_form.html.erb

フォームをSimple Formにして再度Bootstrap化する。

Terminal
rails g bootstrap:themed Nodes
   identical  app/views/users/index.html.erb
   identical  app/views/users/new.html.erb
   identical  app/views/users/edit.html.erb
   identical  app/views/users/_form.html.erb
   identical  app/views/users/show.html.erb

rails g bootstrap:themed Tenants


シンプルな _form.html.erb が出来上がる。

_form.html.erb
<%= simple_form_for @user, :html => { :class => 'form-horizontal' } do |f| %>
  <%= f.input :name %>
  <%= error_span(@user[:name]) %>
  <%= f.input :password %>
  <%= error_span(@user[:password]) %>
  <%= f.input :email %>
  <%= error_span(@user[:email]) %>
  <%= f.input :regist_date %>
  <%= error_span(@user[:regist_date]) %>

  <%= f.button :submit, :class => 'btn-primary' %>
  <%= link_to t('.cancel', :default => t("helpers.links.cancel")),
                users_path, :class => 'btn btn-default' %>
<% end %>
※ここで、Webサービスは再起動する。


http://paas:3000/nodes

多対多のフォーム
----------------

多対多のフォーム
----------------

https://qiita.com/sasarkyz/items/b17c8a108b3075a015c3
http://www.rokurofire.info/2014/02/26/rails_tablerelationship/

モデル

nodeに追加

  accepts_nested_attributes_for :app_categories

コントローラ

  def new
    @app = App.new
    @node.node_configs.build #2
  end

  def app_params #3
    params.require(:app).permit(:id, :name, :app_categories_attributes => [:id, :category_id])
  end
end

ビュー

  <div class="field">
    <%= f.fields_for :node_configs do |nc| %>
      <%= nc.label 'ジャンル' %><br>
      <%= nc.collection_select :platform_id, Platform.all, :id, :platform_name %>
    <% end %>
  </div>

# データ登録

mysql -u root -p rails_getconfig_development

bundle install
bundle update

bundle exec rails db:environment:set RAILS_ENV=development
bundle exec rails db:migrate:reset RAILS_ENV=development
bundle exec rails db:seed
 
class DummyHost

puts 'SERVERS'
Server.find_or_create_by_servername :servername => 'pm00', :url_suffix_cm => '/pm00/_sitekey_' 

puts 'STATS'
Stat.find_or_create_by_statname :statname => 'HW'

  testsite = Site.find_or_create_by_sitename :sitename => sitename, :sitekey => sitekey, :user_id => testuser.id, :deploy_flg => 1
  puts 'site: ' << testsite.sitename
  testsite.monitoring_tools << MonitoringTool.find(1)
  testsite.monitoring_tools << MonitoringTool.find(2)

bundle exec rails c

site = Site.find_or_create_by(site_name: 'Tokyo01')
tenant = Tenant.find_or_create_by(tenant_name: 'Test01')

Node.find_or_create_by(node_name: 'ostrich') do |node|
  node.ip = '192.168.10.1'
  node.tenant_id = tenant.id
end

node = Node.find_or_create_by(node_name: 'ostrich', ip: '192.168.10.1')

node.sites << site
node.tenant = tenant
node.save

users = {}
users['Linux']   = Account.find_or_create_by(account_name: 'Linux',   user_name: 'someuser',      password: 'P@ssword')
users['Windows'] = Account.find_or_create_by(account_name: 'Windows', user_name: 'administrator', password: 'P@ssword')
users['vCenter'] = Account.find_or_create_by(account_name: 'vCenter', user_name: 'guest',         password: 'P@ssword', remote_ip: '192.168.10.100')

mysql> select * from domains order by id;
+----+-------------+
| id | domain_name |
+----+-------------+
|  1 | Linux       |
|  2 | vCenter     |
|  3 | VMHost      |
|  4 | Windows     |
|  5 | Solaris     |
+----+-------------+

platforms = {}
["Linux", "vCenter", "Windows"].each { |name|
  platforms[name] = Platform.find_or_create_by(platform_name: name, build: 1)
}

platform = Platform.find_or_create_by(platform_name: 'vCenter', build: 1)
Platform.find_or_create_by(platform_name: 'vCenter', build: 1)

mysql> select * from nodes;
+----+-----------+-----------+
| id | tenant_id | node_name |
+----+-----------+-----------+
|  1 |         1 | ostrich   |
|  2 |         1 | w2016     |
|  3 |         1 | esxi      |
|  4 |         1 | sol       |
+----+-----------+-----------+

node = Node.find_or_create_by(node_name: 'ostrich', ip: '192.168.10.1')


node_config = NodeConfig.find_or_create_by(platform_id: platform.id, node_id: node.id)

, account_id: users['Linux'].id)

[["ostrich", "Linux", "192.168.10.1"], ["w2016", "Windows", "192.168.10.2"]].each { |node_info|
  node = Node.find_or_create_by(node_name: node_info[0], ip: node_info[2])
  node.
  pp node[0]
  pp node[1]
}

コントローラ作成
----------------

bundle install

bundle exec rails db:environment:set RAILS_ENV=development
bundle exec rails db:migrate:reset RAILS_ENV=development

bundle update

bundle exec rails db:seed

bundle exec rails s

bundle install

bundle exec rails db:environment:set RAILS_ENV=development
bundle exec rails db:migrate:reset RAILS_ENV=development

bundle update

bundle exec rails db:seed

bundle exec rails s

マスターメンテ

tenants
accounts

bundle exec rails generate scaffold_controller tenants
bundle exec rails generate scaffold_controller accounts
rails g bootstrap:themed Accounts

<model>

validates :password, confirmation: true

  attr_writer :password_confirmation

<view>

    div.field
      =f.label :password_confirmation
      br
      =f.password_field :password_confirmation
      

インポート

platfroms

bundle exec rails g scaffold_controller platforms
bundle exec rails g bootstrap:themed Platforms
bundle exec rails g controller platforms import


ノードリスト

Node.find(1)


    node_ids   = Node.joins(:tenant).where(
                    'tenants.tenant_name like ? and node_name like ?',
                    wildcard(@tenant),
                    wildcard(@node)).ids
    metric_ids = Metric.joins(:domain).where(
                    'domains.domain_name like ? and metric_name like ?',
                    wildcard(@domain),
                    wildcard(@metric)).ids
    @inventories = TestResult.where(
                        node_id: node_ids, metric_id: metric_ids
                    ).includes(:node, :metric).page(params[:page])

bundle exec rails db:environment:set RAILS_ENV=development
bundle exec rails db:migrate:reset RAILS_ENV=development

bundle update

bundle exec rails db:seed

node_ids     = Node.joins(:tenant).where('tenants.tenant_name like ?', 'Test01').ids
node_configs = NodeConfig.preload(:platform).where(node_id: node_ids)

Node.joins(:tenant).where('tenants.tenant_name like ?', 'Test01')

node_configs[0].platform.platform_name
=> "Linux"
node_configs[0].account.account_name
=> "Linux"

select * from node_configs distinct_by node_id

render :partial => 'form'

= render partial: "node_config", locals: {contents: @nodes[0].node_configs}

@nodes[0]

@nodes[0].platforms

@nodes[0].node_configs[0].platform.platform_name
=> "Linux"
# contents/_index.html.slim

table
  tr
    - contents.each do |content|
      td content.xxx

selection

f.input :country_id, collection: @continents, as: :grouped_select, group_method: :countries
@tagss.map{|t| [t.tag_name, t.id]}


collectionに配列を指定する
= f.input :source, as: :select, required: true, collection: [["Search", :search], ["Manual", :manual]]
associationから選択
= f.association :company
simple_enum

= f.input :deliver_cd, collection: f.object.class.delivers.hash

      
ノード構成

bundle exec rails g scaffold_controller node_configs
bundle exec rails g bootstrap:themed NodeConfigs
bundle exec rails g controller platforms import

 
bundle exec rails g scaffold_controller tags
bundle exec rails g bootstrap:themed Tags

p @node.node_configs.find_by(platform_id: platform.id)
p @node.node_configs.find_by(platform_id: 3)
p @node.node_configs.find_by(platform_id: 3).node_config_details

Nested form デモ

git clone https://github.com/nathanvda/cocoon_simple_form_demo

sudo -E yum install sqlite-devel
gem install sqlite3 -v '1.3.13'

bundle exec rails generate scaffold_controller node_configs
 