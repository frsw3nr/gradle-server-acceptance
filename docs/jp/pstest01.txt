 lmi -h localhost hwinfo
 342901

実行ポリシーの設定

ローカルで作成したスクリプトは署名なしで実行できるよう実行ポリシーを変更します

Set-Exe

 dir | format-table Name,Length
 dir | format-list Name,Length
 dir | format-wide Name -column 6
 dir | out-gridview

$log_dir = "."
$ip = "192.168.0.14"
$server = "win2012"
$user = "administrator"
$password = "P@ssword"

$secure   = ConvertTo-SecureString $password -asplaintext -force
$cred     = New-Object System.Management.Automation.PsCredential $user, $secure

Enter-PSSession -Credential $cred -ComputerName $ip

Get-WmiObject Win32_Processor
| Out-File "$log_dir/cpu" -Encoding UTF8
Get-WmiObject Win32_OperatingSystem | `
    select TotalVirtualMemorySize,TotalVisibleMemorySize, `
        FreePhysicalMemory,FreeVirtualMemory,FreeSpaceInPagingFiles | Out-File "$log_dir/memory" -Encoding UTF8
Get-WmiObject Win32_PnPSignedDriver | Out-File "$log_dir/driver" -Encoding UTF8
Get-WmiObject Win32_LogicalDisk | Out-File "$log_dir/filesystem" -Encoding UTF8
Invoke-Command -Scriptblock `
{Get-Item "HKLM:System\CurrentControlSet\Control\Lsa\FIPSAlgorithmPolicy"} `
-credential $cred -Computername $ip | Out-File "$log_dir/fips" -Encoding UTF8
Get-WmiObject Win32_NetworkAdapterConfiguration | `
 Where{$_.IpEnabled -Match "True"} | `
 Select MacAddress, IPAddress, DefaultIPGateway, Description | `
 Format-List ` | Out-File "$log_dir/network" -Encoding UTF8
Invoke-Command -Scriptblock `
{Get-ItemProperty "HKLM:SYSTEM\CurrentControlSet\Services\disk" "TimeOutValue" | Select-Object -ExpandProperty TimeOutValue} `
-credential $cred -Computername $ip | Out-File "$log_dir/storage_timeout" -Encoding UTF8

Exit-PSSession

OS名の検索

Get-WmiObject Win32_OperatingSystem

 SystemDirectory : C:\Windows\system32
Organization    :
BuildNumber     : 9600
RegisteredUser  : Windows ユーザー
SerialNumber    : 00252-10000-00000-AA228
Version         : 6.3.9600

PowerShellバージョンの検索

$PSVersionTable.PSVersion

ローカルコンピューター名の検索

$env:COMPUTERNAME

インストールされている役割と機能の一覧

Windows Firewall の受信規制の中から特定の定義を確認する

Get-NetFirewallRule -Direction Inbound -Description *http*

ネットワークアダプターの検索

Get-NetAdapter|FL

IPアドレスの検索

Get-NetIPAddress | where AddressFamily -eq "IPv4"

DNSサーバの検索

Get-DnsClientServerAddress|FL

特定サービスのファイヤーウォール設定を検索する

Get-NetFirewallRule -Direction inbound -Description *http*

システム情報を検索する

Get-WmiObject -Class Win32_ComputerSystem

Domain              : WORKGROUP
Manufacturer        : VMware, Inc.
Model               : VMware Virtual Platform
Name                : WIN2012
PrimaryOwnerName    : Windows ユーザー
TotalPhysicalMemory : 2147012608

Select-Object で必要な要素のみを取り出し

Dir | select-Object -Property Name

NICのプロファイルが「識別されていない」場合

クライアントPCで以下を実行

Enable-PSRemoting -Force SkipNetowrkProfileCheck

使用言語の取得

Get-Culture

LCID             Name             DisplayName
1041             ja-JP            日本語 (日本)

稼働中のサービス

Get-Service | where Status -eq "Running"

Get-Service | where Status -eq "Running" | Select-Object -Property Name

if [ -x "/usr/bin/systemctl" ] ; then
    /usr/bin/systemctl status iptables > ${work_dir}/iptables.systemctl
elif [ -x "/sbin/chkconfig" ] ; then
    /sbin/chkconfig --list|grep iptables > ${work_dir}/iptables
fi

    def machineid(session, test_item) {
        def lines = exec('machineid') {
            def command = """\
            |if [ -f /etc/machine-id ]; then
            |    cat /etc/machine-id > ${work_dir}/machineid
            |elif [ -f /var/lib/dbus/machine-id ]; then
            |    cat /var/lib/dbus/machine-id > ${work_dir}/machineid
            |fi
            """.stripMargin()
            session.execute command
            session.get from: "${work_dir}/machineid", into: local_dir
            new File("${local_dir}/machineid").text
        }
        lines = lines.replaceAll(/(\r|\n)/, "")
        test_item.results(lines)
    }

$log_dir = "."
$ip = "192.168.0.14"
$vcenter = "192.168.10.100"
$user = "test_user"
$password = "P@ssword"

Add-PSSnapin VMware.VimAutomation.Core
Connect-VIServer -User $user -Password $password -Server $vcenter

administrator@vsphere.ostrich


$vcenter = "192.168.10.101"
$user = "spcops@vsphere.ostrich"
$password = "P@ssw0rd"

Add-PSSnapin VMware.VimAutomation.Core
Connect-VIServer -User $user -Password $password -Server $vcenter

$alarmMgr = Get-View AlarmManager
$alarms = $alarmMgr.GetAlarm($entity.Extensiondata.MoRef) | %{Get-View $_}
$alarminfos = $alarms.info
foreach ($alarminfo in $alarminfos) {
Write-output $alarminfo.Name
}


変更点
------

- [ ] Linux検査シナリオ
    - [ ] 言語の選択
    - [ ] カーネルパラメータ
        - [ ] kernel.core_pattern
        - [ ] net.ipv6.conf.all.disable_ipv6
        - [ ] net.ipv6.conf.default.disable_ipv6
    - [ ] サービスの有効化
        - [ ] telnet
        - [ ] rsh
        - [ ] rlogin

        ps -ax|grep inetd|grep -v grep
        と入力し、inetdとでたら、/etc/inetd.conf
        のloginで始まる行のコメントを解除しましょう。
        ファイルを、

        xinetdと表示されたら/etc/xinetd.d/rlogin
        を修正しましょう。
        disable = yes
        となっているはずです。これをnoに変えましょう。


    - [ ] hosts リスト


    - [ ] リソース制限
        - [ ] /etc/security/limits.conf
        - [ ] /etc/security/limits.d/90-nproc.conf

ulimit
unlimited

    - [ ] その他
        - [ ] prelink の無効化 /etc/sysconfig/prelink
        - [ ] yumリポジトリ /etc/yum.repos.d/media.repo

grep -H PRELINKING /etc/sysconfig/prelink


- [ ] Windows検査シナリオ
    - [ ] 導入済み機能 「サーバーマネージャー」→「ダッシュボード」→「役割と機能の追加」

Windows Server 2008 R2以前 †
使用するコマンドはServerManagerCmd.exe
現在の状態は-queryオプションを使う

C:\Users\Adminstrator> ServerManager -query

Windows Server 2012以降 †
コマンドプロンプトではなく、PowerShellを使う。
使用するコマンドレットは***-WindowsFeature
現在の状態はGet-WindowsFeatureコマンドレットを使う

C:\Users\Administrator> Get-WindowsFeature

    - [ ] タスクスケジューラ 「コンピュータの管理」→「システムツール」→「タスクスケジューラ」
    - [ ] hosts リスト C:\Windows\System32\drivers\etc
    - [ ] セキュリティポリシー 「ファイル名を指定して実行」→「secpol.msc」
        - [ ] パスワードの有効期限
        - [ ] 複雑さの要件を満たすパスワード
        - [ ] メモリ内のページのロック
    - [ ] システムエラー時の挙動／ダンプファイル「システム」→「システムの詳細設定」→「詳細設定」→「”起動と回復”の設定」
        - [ ] 自動的に再起動する
        - [ ] デバッグ情報の書き込み
        - [ ] ダンプファイル
        - [ ] 既存のファイルに上書きする
    - [ ] リモートデスクトップ 「サーバーマネージャー」→「ローカルサーバー」→「リモートデスクトップ」
        - [ ] このコンピュータへのリモート接続を許可する
        - [ ] ネットワークレベル認証でリモートデスクトップを実行しているコンピュータからのみ接続を許可する
    - [ ] リモートデスクトップセッション「ファイル名を指定して実行」→「gpedit.msc」→「コンピューターの構成」→「管理用テンプレート」→「Windowsコンポーネント」
            →「リモートデスクトップサービス」→「リモートデスクトップセッションホスト」）
        - [ ] 切断されたセッションの制限時間を設定する
        - [ ] 接続数を制限する
        - [ ] リモートデスクトップサービスユーザに対してリモートデスクトップサービスセッションを1つに制限する
    - [ ] 個別適用パッチ（「コマンドプロンプト」→「wmic qfe」）
    - [ ] PowerShellスクリプトの実行ポリシー設定 ExecutionPolicy → RemoteSigned
        - [ ] 64bit版
        - [ ] 32bit版



関連課題
--------