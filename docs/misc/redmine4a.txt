Redmine4 調査
=============

* 有効なフィーチャーは #306 Full Text Search of files。4.1 で対応予定。
* 4.0移行環境でPlugInで内部エラー発生。

リファレンス調査
----------------

https://www.slideshare.net/g_maeda/redmine-4041

添付ファイル内のテキスト検索 #306
https://www.farend.co.jp/blog/2018/10/redmine-4/


アップグレード
--------------

* バックアップ
mysqldump -u root -p redmine > redmine.dmp
mv redmine redmine.bak

   create database redmine4 default character set utf8;
   grant all on redmine4.* to redmine4@localhost identified by 'password';
   grant all privileges on redmine.* to redmine4@"%" identified by 'password' with grant option;
   flush privileges;

mysql -u redmine4 -p redmine4 < redmine.dmp

* 本体
cd ~
wget https://www.redmine.org/releases/redmine-4.0.1.tar.gz
tar xvf redmine-4.0.1.tar.gz
ln -s redmine-4.0.1 redmine
cp redmine.bak/config/database.yml redmine/config/database.yml

cd redmine
bundle install --path vendor/bundle
bundle exec rake generate_secret_token
RAILS_ENV=production bundle exec rake db:migrate
sudo /etc/init.d/httpd restart

* Image Magic のエラー

CentOSのyumリポジトリは 6.7.2。6.8.9 以上が必要
(RMagick3をインストールするには)
7系が最新だが互換性が問題でインストールできなかったため、6系の最新をインストール

wge http://www.imagemagick.org/download/ImageMagick-6.9.10-28.tar.xz
 mv ./ImageMagick.tar.gz /usr/local/src/
 cd /usr/local/src/
 tar xfz ./ImageMagick.tar.gz
 cd ImageMagick-6.8.7-7
 ./configure
 make
 make install
 convert -list format | egrep "GIF|JPEG|PNG"


* プラグイン
cp -r ~/redmine.bak/plugins/redmine_getconfig ~/redmine/plugins
bundle install
RAILS_ENV=production bundle exec bin/rake redmine:plugins:migrate

デバイスメニューでエラー
NoMethodError (undefined method `page' for #<Array:0x007f3508a7f618>):
plugins/redmine_getconfig/app/controllers/device_inventory_controller.rb:31:in `index'

# binding.pry
    @rows = DeviceResult.where(
                node_id: nodes.ids, metric_id: @metric_id
            ).select(
                :node_id, :metric_id, :seq
            ).uniq.page(
                params[:page]
            )

http://ostrich:3000/inventory?node=ostrich

DeviceResult.where(
    node_id: nodes.ids, metric_id: @metric_id
).select(
    :node_id, :metric_id, :seq
).uniq.page(
    params[:page]
)

DeviceResult.where(node_id: nodes.ids, metric_id: @metric_id).select(:node_id, :metric_id, :seq).uniq()
.page(0)

arr=DeviceResult.where(node_id: nodes.ids, metric_id: @metric_id).select(:node_id, :metric_id, :seq).uniq()
arr.page がない
arr2=DeviceResult.where(node_id: nodes.ids, metric_id: @metric_id).select(:node_id, :metric_id, :seq)
arr2.page がない
arr3=DeviceResult.where(node_id: nodes.ids, metric_id: @metric_id)
arr3.page はある

DeviceResult.where(node_id: nodes.ids, metric_id: @metric_id).page(0).select(:node_id, :metric_id, :seq).uniq()

メソッドの呼び出し順序の調整が必要。要調査

戻し作業
--------

3.4最新の 3.4.8 に移行

wget http://www.redmine.org/releases/redmine-3.4.8.tar.gz
tar xvf redmine-3.4.8.tar.gz
mv redmine redmine.bak
ln -s redmine-3.4.8 redmine
cp redmine.bak/config/database.yml redmine/config/database.yml
cd redmine
bundle install --path vendor/bundle
bundle exec rake generate_secret_token
RAILS_ENV=production bundle exec rake db:migrate
sudo /etc/init.d/httpd restart
cp -r ~/redmine.bak/plugins/redmine_getconfig ~/redmine/plugins
bundle install
RAILS_ENV=production bundle exec bin/rake redmine:plugins:migrate
sudo /etc/init.d/httpd restart

モデル調査
-----------

プラットフォーム検索


@naopontan さんもおっしゃっていますが、  group_users テーブルに対して検索を行う方が早いと思います。

class UserGroup < ApplicationRecord # GroupUser が rails に取られてたので、これで代用
  self.table_name = 'group_users'
end

NodeConfig
  .select(:platform_id)
  .where(node: [user_a, user_b, user_c])
  .group(:group_id)
  .having('count(user_id) = 3')

Node.joins(:tenant).where('tenants.tenant_name like ? and node_name like ?',wildcard(@tenant),wildcard(@node))

Node.joins(:platforms, :tenant).where('tenants.tenant_name like ? and node_name like ?',wildcard(@tenant),wildcard(@node))
===> []

Node.joins(:platforms).where('node_name like ?',wildcard(@node))
===>
SELECT `nodes`.* FROM `nodes` INNER JOIN `node_configs` ON `node_configs`.`node_id` = `nodes`.`id` INNER JOIN `platforms` ON `platforms`.`id` = `node_configs`.`platform_id` WHERE (node_name like '%%%')

select distinct nodes.id, metrics.platform_id from nodes, test_results, metrics where nodes.id = test_results.node_id and metrics.id = test_results.metric_id;
===> 20行

select nodes.id, metrics.platform_id, metrics.metric_name from nodes, test_results, metrics where nodes.id = test_results.node_id and metrics.id = test_results.metric_id;
===> 599行

select nodes.id, metrics.platform_id, metrics.metric_name from nodes, test_results, metrics where nodes.id = test_results.node_id and metrics.id = test_results.metric_id and nodes.node_name like '%ostrich%';
===>
+----+-------------+---------------------+
| id | platform_id | metric_name         |
+----+-------------+---------------------+
|  3 |           3 | MemoryGB            |
|  3 |           3 | NumCpu              |
|  3 |           3 | PowerState          |

Node.joins(:metrics).where('node_name like ?',wildcard('ostrich'))

Metric.joins(:platform).where('platforms.platform_name like ? and device_flag = 1', wildcard('Linux'))
===> Linux プラットフォームのデバイスリスト

pp Metric.joins(:nodes).where('nodes.node_name like ? and device_flag = 1', wildcard('ostrich'))
===> ostrich ノードのデバイスリスト
===>
SELECT `metrics`.* FROM `metrics` INNER JOIN `device_results` ON `device_results`.`metric_id` = `metrics`.`id` INNER JOIN `nodes` ON `nodes`.`id` = `device_results`.`node_id` WHERE (nodes.node_name like '%router%' and device_flag = 1)

(device_resultsをジョイン)


===> 2051件

Employer.joins({:people => {:household => {:suburb => :city}}}) 

<<<<<<< HEAD
pp Metric.joins({:nodes => {:}}).where('nodes.node_name like ? and device_flag = 1', wildcard('eternus')).count

node = Node.find(2)
test_result = node.test_results[0]

test_result.metric.platform

test_result.metric.platform.platform_name
===> "Linux"

Node.find(2).test_results.first

node.metrics.merge(TestResult)


Node.find(2).test_results[0].metric
===> Platform と紐づく。ループさせれば Platform id のリストは作れる

select platform__id from nodes, test_results,
=======
ページネーション調査
--------------------

pp params[:page]

@rows = DeviceResult.where(
            node_id: nodes.ids, metric_id: @metric_id
        ).select(
            :node_id, :metric_id, :seq
        ).uniq.page(
            params[:page]
        )

@rows = DeviceResult.where(node_id: nodes.ids, metric_id: @metric_id).select(:node_id, :metric_id, :seq).uniq
---> 9件
@rows2 = DeviceResult.where(node_id: nodes.ids, metric_id: @metric_id).select(:node_id, :metric_id, :seq)
---> 9件
uniqの必要性

select node_id,metric_id, seq, count(*) from device_results group by node_id,metric_id, seq;

|      13 |       531 |    4 |        8 |
|      13 |       531 |    5 |        8 |
+---------+-----------+------+----------+
8166 rows in set (0.04 sec)

select * from device_results where node_id = 13 and metric_id = 531 and seq = 5;
+--------+---------+-----------+------+----------------+-----------+
| id     | node_id | metric_id | seq  | item_name      | value     |
+--------+---------+-----------+------+----------------+-----------+
| 134748 |      13 |       531 |    5 | CopyProtection | Disable   |
| 134742 |      13 |       531 |    5 | Name           | LUN_V#004 |
| 134741 |      13 |       531 |    5 | No             | 4         |
| 134746 |      13 |       531 |    5 | RAIDGrName     | LUN_R#004 |
| 134745 |      13 |       531 |    5 | RAIDGrNo       | 4         |
| 134747 |      13 |       531 |    5 | Size           | 1116160   |
| 134743 |      13 |       531 |    5 | Status         | Available |
| 134744 |      13 |       531 |    5 | Type           | Standard  |
+--------+---------+-----------+------+----------------+-----------+

@rows3 = @rows2.page(0)

@rows = DeviceResult.where(node_id: nodes.ids, metric_id: @metric_id).select(:node_id, :metric_id, :seq).uniq
Kaminari.paginate_array(@rows).page(params[:page])

デバイスメニュー
----------------

@devices.map
|d| [d.platform.platform_name + ':' + d.metric_name, d.id]

Node.joins(:platforms).where('node_name like ?',wildcard(@node))

has_many through 検索

merge と include がある

merge: 複数の条件を併合（＝マージ）するメソッドです。
ざっくり言うと、直前に行った条件に対して、さらに絞り込みを行いたい時に使います。

inlude 調査

u = User.includes([:attendances, :events]).find(1)
rows = Node.includes([:platforms]).where('node_name like ?',wildcard(@node))

モデル再調査
------------

./bin/rails console

Site.all
⇒プロジェクトIDリスト検索

Node.joins(:tenant).find_by(id: 2)
⇒最初はNodeのみ検索

x=Node.includes(:tenant).find_by(id: 1)
x.tenant
⇒最初にNodes と includes内テーブルも検索

多対多

@nodes=Node.eager_load(:sites).find_by(id: 2)
pp @nodes.sites[0]

@metrics=Node.eager_load(:metrics).find_by(id: 2)
pp @metrics.metrics
pp @metrics.metrics.length
⇒ 4件

@metrics=Node.includes(:metrics).find_by(id: 2)
pp @metrics.metrics.length
⇒ 194件 全件検索される

デバイス付き検査結果

@devices=Node.find_by(node_name:'ostrich').device_results
@devices[0].metric.metric_name
@devices[0].metric.platform.platform_name

Node.find_by(node_name:'ostrich').device_results.select(:metric_id,:metric_name).distinct
⇒ 18件 メトリックID


Metric.joins(:nodes).where('nodes.node_name like ?  and device_flag = 1', 'ostrich').distinct.lengthevice_flag = 1', 'ostrich').distinct
⇒ 18件

Metric.eager_load(nodes: :platforms).where('nodes.node_name like ?  and device_flag = 1', 'ostrich').distinct.lengthevice_flag = 1', 'ostrich').distinct

Metric.eager_load(platforms: :nodes).where('nodes.id = ?', 2)

http://gijutsumemo.hatenadiary.jp/entry/2018/07/08/133747

Metric.find_by(id: 1)
⇒Account
Metric.eager_load(:platform).find_by(id: 1)
⇒Platform が返る
Metric.eager_load(:nodes).find_by(id: 1)

Metric.eager_load(platforms:).find_by(id: 1)
.where('nodes.id = ?', 2)


ビュー調査
----------

デバイスメニューリスト

@devices

    @devices = Metric.joins(:platform).where(
                'platforms.platform_name like ? and device_flag = 1', wildcard(@platform))

>>>>>>> aafc7d39e3e2be151ec075516a4237215a88fa99

