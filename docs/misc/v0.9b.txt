Getconfig サマリシートの項目追加
=================================

既存コード調査
--------------

既定のExcelファイル書き込み

gradle --daemon clean test --tests "EvidenceSheetTest.既定のExcelファイル書き込み"
gradle --daemon clean test --tests "EvidenceSheetTest.複数検査結果書き込み"

テストコード内

        def evidence = new EvidenceSheet('src/test/resources/config1.groovy')
        evidence.readSheet()
        evidence.prepareTestStage()

        def data = ['Linux': ['ostrich': ['vCenter': [
            'test': ['NumCpu':2, 'PowerState':'PoweredOn', 'MemoryGB':2],
            'verify':['NumCpu':true, 'MemoryGB':false]
        ]]]]
        evidence.updateTestResult('Linux', 'ostrich', 0, data['Linux']['ostrich'])

変更範囲調査

メソッド

private static CellStyle createBorderedStyle(Workbook wb)
readSheetServer(Sheet sheet_server)					# 検査対象シートの読み込み
setServerInfos(server_infos = [:])					# test_servers に検査対象サーバセット
readServerConfigScript(String server_config_script)	# Groovyスクリプトから検査対象読み込み
readServerConfigCSV(String server_config_csv)		# CSVから検査対象読み込み
readSheetSpec(String platform, Sheet sheet_spec)	# テスト項目セット xxx_test_ids
readSheetRule(Sheet sheet_rule)						# ルール定義シート読み込み
readTestResult(Sheet sheet)							# CSVエクスポート用
readAllTestResult()									# CSVエクスポート用(メイン)
readSheet(HashMap options = [:])					# Excel読み込み(メイン)
setTestResultCellStyle(XSSFCell cell, ResultCellStyle type)	# スタイルユーティリティ
writeNodeFile(String platform, String server_name, def node_config)	# ??? .last_run更新

サマリシート更新メソッド

updateTemplateResult(String platform, String server_name, int sequence)
	テンプレートファイル読み込んでExcel シート更新

updateTestResult(String platform, String server_name, int sequence, Map results)
	検査対象結果登録。以下、使用例
        def data = ['Linux': ['ostrich': ['vCenter': [
            'test': ['NumCpu':2, 'PowerState':'PoweredOn', 'MemoryGB':2],
            'verify':['NumCpu':true, 'MemoryGB':false]
        ]]]]
        evidence.updateTestResult('Linux', 'ostrich', 0, data['Linux']['ostrich'])
	
	シートからテストID読み込んでいる

updateTestTargetSheet(server_infos = [:])
	全検査対象の結果登録

デバイス更新メソッド

insertDeviceSheet(String platform, String test_id, List headers, Map csvs)
writeDeviceFile(String platform, String test_id, List headers, Map csvs)

updateTestResult()をコールする前にシート結果にテスト項目を追加する

最終行に追加

        def inp = new FileInputStream(evidence_target)
        def wb  = WorkbookFactory.create(inp)
        def sheet_result = wb.getSheet(sheet_name_specs[platform])

Excel(ファイル名=evidence_target)を読む
プラットフォームからシートを選択
最終行にテスト項目を追加


addTestItemsToTargetSheet(String platform, test_items = [])

//ヘッダ行の作成
 addTestItemsToTargetSheet(String platform, String domain, test_items = [])

テスト項目追加メソッド追加

addTestItemsToTargetSheet

gradle --daemon clean test --tests "TestSchedulerTest.テスト項目追加"

InfraTestSpec にテスト項目追加メソッドを追加

DomainTestRunner 内

        def test = new DomainTestRunner(test_server, 'vCenter')
        TestItem[] test_items = []
        test.run(test_items)

        def test_results = test.makeTest(['vm'])

TestScheduler 内

    def runServerTest(TargetServer test_server, SpecTestMode mode, String label = '') {
        test_server.with {
            setAccounts(test_runner.config_file)
            domain_specs.each { domain, test_ids ->
                def is_serial = serialization_domains.containsKey(domain)

                    def domain_test = new DomainTestRunner(it, domain)
                    domain_test.with {
                        ...
                        def domain_results = [
                            'test' : getResults(),
                            'verify' : getVerifyStatuses(),
                            'additional_test_items': getAdditionalTestItems(), <=== 追加
                        ]

    TestItem(String test_id) {
        this.test_id = test_id
        this.enabled = true
        this.results = [:]
        this.verify_status = [:]
        this.additional_test_items = [:]
    }

	test_item.additional_test_items = ['A': ['test_name': 'Aテスト', 'desc': 'テストA']]
	
    def addAdditionalTestItem(TestItem test_item, String test_id, 
                              String test_name = null, String desc = null) {
        test_item.additional_test_items[test_id] = [
            'test_name': test_name, 
            'domain':    this.domain, 
            'desc':      desc,
        ]
    }

getAdditionalTestItems

TestScheduler.groovy 内

runSetverTest(TargetServer test_server,...)

    def domain_results = [
        'test' : getResults(),
        'verify' : getVerifyStatuses(),
        'additional_test': getAdditionalTestItems(),
    ]
    test_evidences[platform][server_name][domain] = domain_results


