apply plugin: 'groovy'
apply plugin: "application"

mainClassName = 'jp.co.toshiba.ITInfra.acceptance.TestRunner'
def language  = 'jp' // 'en'

applicationDefaultJvmArgs = [
    "-Dlogback.configurationFile=./config/logback.xml",
    "-Dtest.config=./config/config.groovy",
]

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
version = '0.1.17'

repositories {
    jcenter {
        url "http://jcenter.bintray.com/"
    }
    jcenter {
        url "http://amateras.sourceforge.jp/mvn/"
    }
// jcenter()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile "commons-cli:commons-cli:1.2"
    compile "commons-lang:commons-lang:2.6"
    compile "commons-io:commons-io:2.4"
    compile "commons-net:commons-net:3.3"
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile 'org.codehaus.gpars:gpars:1.2.0'
    compile 'com.xlson.groovycsv:groovycsv:1.1'
    compile 'org.apache.commons:commons-csv:1.3'
    compile 'org.apache.commons:commons-compress:1.+'
    compile 'org.hidetake:groovy-ssh:2.7.1'
    compile 'ch.ethz.ganymed:ganymed-ssh2:262'
    compile 'com.goebl:david-webb:1.3.0'
    compile "org.apache.poi:poi:3.14"
    compile "org.apache.poi:poi-ooxml:3.14"
    compile "org.apache.poi:ooxml-schemas:1.1"
    compile "org.apache.ant:ant:1.9.7"
    compile "mysql:mysql-connector-java:5.1.6"
    compile "com.h2database:h2:1.3.157"
    compile 'org.codehaus.groovyfx:groovyfx:0.4.0'
    compile 'com.jfoenix:jfoenix:1.4.0'
    compile 'net.java.openjfx.backport:openjfx-78-backport:1.8.0-ea-b96.1'
    compile 'jp.sf.amateras.xlsbeans:xlsbeans:1.2.5'
    compile 'com.github.mygreen:xlsmapper:1.6'
    compile 'net.sf.jett:jett-core:0.10.0'

    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'junit:junit:4.12'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}
apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
  manifest {
    attributes 'Main-Class': mainClassName
  }
}

run {
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

task zipApp(type: Zip, dependsOn: shadowJar) {
    def target  = 'server-acceptance'
    archiveName = "${baseName}-${version}.${extension}"
    // Issue: Copy hidden file
    // http://stackoverflow.com/questions/29504250/how-to-copy-hidden-resource-files-in-gradle
    org.apache.tools.ant.DirectoryScanner.removeDefaultExclude("**/.gitignore")

    into("./${target}/") {
        from file("src/main/resources/root/.gitignore")
        from fileTree(dir: "image")
        from fileTree(dir: "src/main/resources/root/${language}")
        from fileTree(dir: "docs/${language}").include('Readme.md', 'Usage.md')
        from fileTree(dir : '.').include('getconfig*', 'LICENSE.txt', 'Changes.txt')
    }
    // def check_sheet = (language == 'jp') ? 'サーバチェックシート.xlsx' : 'check_sheet.xlsx'
    // into("./${target}/${check_sheet}") {
    //     from file(dir: "src/main/resources/root/${language}/check_sheet.xlsx")
    // }
    into("./${target}/image") {
        from fileTree(dir: "image/")
    }
    into("./${target}/docs/html") {
        from fileTree(dir: "docs/${language}/sphinx-doc/_build/html/")
    }
    into ("./${target}/config") {
        from fileTree(dir : 'config').include("*.xml")
    }
    [
        'lib',
        'build/libs',
        'src/test/resources'
    ].each { path ->
        into ("./${target}/${path}") {
            from path
        }
    }
}

artifacts {
    archives zipApp
}

test {
  beforeTest { descriptor ->
     logger.lifecycle("Running test: ${descriptor}")
  }
}