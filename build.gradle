apply plugin: 'groovy'
apply plugin: "application"

mainClassName = 'jp.co.toshiba.ITInfra.acceptance.TestRunner'
def language  = 'jp' // 'en'

applicationDefaultJvmArgs = [
    "-Dlogback.configurationFile=./config/logback.xml",
    "-Dtest.config=./config/config.groovy",
]

sourceCompatibility = '1.7'
targetCompatibility = '1.7'
version = '0.1.4'

repositories {
    jcenter()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile "commons-cli:commons-cli:1.2"
    compile "commons-lang:commons-lang:2.6"
    compile "commons-io:commons-io:2.4"
    compile "commons-net:commons-net:3.3"
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile 'org.codehaus.gpars:gpars:1.2.0'
    compile 'org.hidetake:groovy-ssh:2.7.0'
    compile 'com.goebl:david-webb:1.3.0'
    compile "org.apache.poi:poi:3.14"
    compile "org.apache.poi:poi-ooxml:3.14"
    compile 'org.apache.poi:ooxml-schemas:1.1'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'junit:junit:4.12'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}
apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
  manifest {
    attributes 'Main-Class': mainClassName
  }
}

run {
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

task zipApp(type: Zip, dependsOn: shadowJar) {
    def target  = 'server-acceptance'
    archiveName = "${baseName}-${version}.${extension}"

    into("./${target}/") {
        from fileTree(dir: "src/main/resources/root/${language}")
        from fileTree(dir: "docs/${language}").include('Readme.md', 'Usage.md')
        from fileTree(dir : '.').include('getconfig*', 'LICENSE.txt')
    }
    into ("./${target}/config") {
        from fileTree(dir : 'config').include("*.xml")
    }
    [
        'lib',
        'build/libs',
        'src/test/resources'
    ].each { path ->
        into ("./${target}/${path}") {
            from path
        }
    }
}

artifacts {
    archives zipApp
}

// gradle --no-daemon generateDomain
// task generateTemplate {
//     String site_home = (project.hasProperty('site_home')) ?
//         project.site_home :
//         System.console().readLine("\nEnter site_home directory: ")

//     def domain = new File(site_home).getName()

    
// }